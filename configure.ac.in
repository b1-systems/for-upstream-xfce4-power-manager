m4_define([intltool_minimum_version], [0.31])
m4_define([xfpm_version_major], [1])
m4_define([xfpm_version_minor], [2])
m4_define([xfpm_version_micro], [0])
m4_define([xfpm_version_build], [@REVISION@])
m4_define([xfpm_version_tag],   [git])
m4_define([xfpm_version], [xfpm_version_major().xfpm_version_minor().xfpm_version_micro()ifelse(xfpm_version_tag(), [git], [xfpm_version_tag()-xfpm_version_build()], [xfpm_version_tag()])])

AC_INIT([xfce4-power-manager],[xfpm_version],[http://bugzilla.xfce.org/])
AC_PREREQ([2.69])

AM_INIT_AUTOMAKE([1.8 dist-bzip2 tar-ustar no-dist-gzip])
AC_CONFIG_HEADERS([config.h])
AM_MAINTAINER_MODE()
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

AC_USE_SYSTEM_EXTENSIONS()

# ===================================================== #
#               Basic compiler settings                 #
# ===================================================== #
AC_PROG_CC()
AM_PROG_CC_C_O()
LT_PATH_LD([])
AC_PROG_INSTALL()
IT_PROG_INTLTOOL([intltool_minimum_version],[no-xml])

# ===================================================== #
#               Initialize libtool                      #
# ===================================================== #
LT_PREREQ([2.2.6])
LT_INIT([disable-static])

# ==================================================== #
#   Check for headers needed for standard interfaces   #
# ==================================================== #
AC_HEADER_STDC()
AC_CHECK_HEADERS([errno.h signal.h stddef.h \
                  string.h sys/stat.h sys/types.h sys/wait.h time.h \
                  unistd.h])

# ===================================================== #
# 		Check for libm	 			#
# ===================================================== #
AC_CHECK_LIB([m], [round])

# ===================================================== #
# 		Check for i18n support 			#
# ===================================================== #

XDT_I18N([@LINGUAS@])

#==================================================== #
#          Check for required packages 		      #
#=====================================================#
m4_define([gtk_minimum_version], [2.24.0])
m4_define([glib_minimum_version], [2.30.0])
m4_define([dbus_minimum_version], [1.1])
m4_define([dbus_glib_minimum_version], [0.84])

m4_define([xfconf_minimum_version], [4.10.0])
m4_define([libxfce4ui_minimum_version],[4.10.0])
m4_define([libxfce4util_minimum_version],[4.10.0])
m4_define([libxfce4panel_minimum_version],[4.10.0])

m4_define([libnotify_minimum_version], [0.4.1])
m4_define([upower_minimum_version], [0.9.8])
m4_define([xrandr_minimum_version], [1.2.0])
m4_define([x11_minimum_version], [1.0.0])

XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [gtk_minimum_version])
XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GOBJECT], [gobject-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([GMODULE], [gmodule-2.0], [glib_minimum_version])
XDT_CHECK_PACKAGE([DBUS], [dbus-1], [dbus_minimum_version])
XDT_CHECK_PACKAGE([DBUS_GLIB], [dbus-glib-1], [dbus_glib_minimum_version])
XDT_CHECK_PACKAGE([XFCONF], [libxfconf-0],[xfconf_minimum_version])
XDT_CHECK_PACKAGE([LIBXFCE4UI], [libxfce4ui-1],[libxfce4ui_minimum_version])
XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0],[libxfce4util_minimum_version])
XDT_CHECK_PACKAGE([LIBNOTIFY],[libnotify], [libnotify_minimum_version])
XDT_CHECK_PACKAGE([UPOWER],[upower-glib], [upower_minimum_version])
XDT_CHECK_PACKAGE([XRANDR],[xrandr], [xrandr_minimum_version])
XDT_CHECK_PACKAGE([X11], [x11], [x11_minimum_version])

#=======================================================#
#              Polkit?			                #
#=======================================================#
AC_ARG_ENABLE([polkit],
        [AS_HELP_STRING([--disable-polkit],[Do not enable PolicyKit support (default=enabled)])],
        [ac_cv_enable_polkit=$enableval],
        [ac_cv_enable_polkit=polkit])
    AC_MSG_CHECKING([whether to build with polkit support])
if test "x$ac_cv_enable_polkit" = "xno"; then
    AC_MSG_RESULT([no])
    polkit="no"
else
    AC_MSG_RESULT([yes])
    AC_DEFINE(ENABLE_POLKIT, 1 , [PolicyKit support])
    polkit="yes"
fi
AM_CONDITIONAL([ENABLE_POLKIT], [test "x$polkit" = "xyes"])

#=======================================================#
#           Check for DPMS support                      #
#=======================================================#
DPMS_LIBS=
AC_ARG_ENABLE([dpms],
AS_HELP_STRING([--enable-dpms],[use dpms extension])
AS_HELP_STRING([--disable-dpms],[don't use dpms extension]),
  [], [enable_dpms=yes])
if test x"$enable_dpms" = x"yes"; then
  AC_DEFINE([HAVE_DPMS], [1], [Define to enable dpms])
fi

AC_CHECK_LIB([Xext], [DPMSQueryExtension], [DPMS_LIBS=" -lXext -lX11"],[])
AC_SUBST([DPMS_LIBS])

#=======================================================#
#      Check for XF86_XK_Suspend && Hibernate           #
#=======================================================#

AC_CHECK_DECL(XF86XK_Suspend,have_XF86XK_Suspend=1,have_XF86XK_Suspend=0,[#include <X11/XF86keysym.h>])
if test "x${ac_cv_have_decl_XF86XK_Suspend}" != "xno"; then
  AC_DEFINE(HAVE_XF86XK_SUSPEND, 1, [Define if XF86XK_Suspend is available])
fi
AC_CHECK_DECL(XF86XK_Hibernate,have_XF86XK_Hibernate=1,have_XF86XK_Hibernate=0,[#include <X11/XF86keysym.h>])
if test "x${ac_cv_have_decl_XF86XK_Hibernate}" != "xno"; then
  AC_DEFINE(HAVE_XF86XK_HIBERNATE, 1, [Define if XF86XK_Hibernate is available])
fi

#=======================================================#
#              Network Manager support                  #
#=======================================================#
AC_ARG_ENABLE([network-manager], AS_HELP_STRING([--disable-network-manager],[Disable network manager support]),
  [ac_network_manager=$enableval], [ac_network_manager=yes])
AC_MSG_CHECKING([whether to build with network manager support.])
if test "x$ac_network_manager = xyes"; then
    AC_DEFINE(WITH_NETWORK_MANAGER, 1 , [Network Manager support])
fi
AC_MSG_RESULT([$ac_network_manager])

#=======================================================#
#                 Panel plugins ?                       #
#=======================================================#
AC_ARG_ENABLE([panel_plugins],
	[AS_HELP_STRING([--disable-panel-plugins],[Do not build panel plugins (default=enabled)])],
	[ac_cv_enable_panel_plugins=$enableval],
	[ac_cv_enable_panel_plugins=yes])
if test "x$ac_cv_enable_panel_plugins" = "xno"; then
	build_panel_plugins="no"
else
	build_panel_plugins="yes"
	XDT_CHECK_PACKAGE([LIBXFCE4PANEL], [libxfce4panel-1.0],
		[libxfce4panel_minimum_version])
fi
AM_CONDITIONAL([BUILD_PANEL_PLUGINS], [test "x$build_panel_plugins" = "xyes"])

#=======================================================#
#              Check for debugging support              #
#=======================================================#
XDT_FEATURE_DEBUG

#=======================================================#
#              Substitute platform flags                #
#=======================================================#
AC_MSG_CHECKING([PLATFORM_CPPFLAGS])
AC_MSG_RESULT([$PLATFORM_CPPFLAGS])
AC_SUBST([PLATFORM_CPPFLAGS])
AC_MSG_CHECKING([PLATFORM_CFLAGS])
AC_MSG_RESULT([$PLATFORM_CFLAGS])
AC_SUBST([PLATFORM_CFLAGS])
AC_MSG_CHECKING([PLATFORM_LDFLAGS])
AC_MSG_RESULT([$PLATFORM_LDFLAGS])
AC_SUBST([PLATFORM_LDFLAGS])

AC_CONFIG_FILES([
Makefile
libdbus/Makefile
common/Makefile
src/Makefile
settings/Makefile
panel-plugins/Makefile
panel-plugins/brightness/Makefile
data/Makefile
data/icons/Makefile
data/icons/16x16/Makefile
data/icons/16x16/actions/Makefile
data/icons/16x16/status/Makefile
data/icons/22x22/Makefile
data/icons/22x22/actions/Makefile
data/icons/22x22/status/Makefile
data/icons/24x24/Makefile
data/icons/24x24/actions/Makefile
data/icons/24x24/status/Makefile
data/icons/48x48/Makefile
data/icons/48x48/actions/Makefile
data/icons/48x48/status/Makefile
data/icons/128x128/Makefile
data/icons/128x128/devices/Makefile
data/icons/scalable/Makefile
data/icons/scalable/status/Makefile
data/icons/scalable/actions/Makefile
data/interfaces/Makefile
po/Makefile.in
])
AC_OUTPUT

echo "prefix:			${prefix}"
echo "xdg autostart:		${sysconfdir}/xdg/autostart"
echo "POLKIT:			${polkit}"
echo "DPMS:			${enable_dpms}"
echo "Network manager:	${ac_network_manager}"
echo "Build panel plugins:	${build_panel_plugins}"
echo "Debug:			${enable_debug}"
echo "Configuration finished, type make to compile"
